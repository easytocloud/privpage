#! /usr/bin/env bash
#
# (c) easytocloud 2022-2024
#
# whoiam is the who am i / whoami for AWS IAM
#

verbose=false
profile=""
credentials_file="${AWS_SHARED_CREDENTIALS_FILE:-$HOME/.aws/credentials}"
config_file="${AWS_CONFIG_FILE:-$HOME/.aws/config}"

# Parse command-line arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    -v|--verbose)
      verbose=true
      shift
      ;;
    --profile)
      profile="--profile $2"
      shift 2
      ;;
    *)
      echo "Unknown option: $1"
      exit 1
      ;;
  esac
done

# Function to check if a profile exists in a file and return the source
get_profile_source() {
  local profile_name=$1
  if grep -q "^\[profile $profile_name\]" "$credentials_file" || grep -q "^\[$profile_name\]" "$credentials_file"; then
    echo "defined in $credentials_file"
  elif grep -q "^\[profile $profile_name\]" "$config_file" || grep -q "^\[$profile_name\]" "$config_file"; then
    echo "defined in $config_file"
  else
    echo "NOT FOUND in $config_file or $credentials_file"
  fi
}

# Determine the source of AWS credentials
if $verbose; then
  if [[ -n $profile ]]; then
    profile_name="${profile#--profile }"
    profile_source=$(get_profile_source "$profile_name")
    echo "Using profile from command-line option: $profile_name ($profile_source)"
  elif [[ -n $AWS_PROFILE ]]; then
    profile_source=$(get_profile_source "$AWS_PROFILE")
    echo "Using profile from \$AWS_PROFILE: $AWS_PROFILE ($profile_source)"
  elif [[ -n $AWS_ACCESS_KEY_ID && -n $AWS_SECRET_ACCESS_KEY ]]; then
    echo "Using AWS credentials from AK/SK environment variables"
  else
    # Check if running on an EC2 instance with an instance role
    if curl -s --connect-timeout 1 http://169.254.169.254/latest/meta-data/iam/security-credentials/ > /dev/null; then
      echo "Using EC2 instance role"
    else
      echo "Using default AWS profile"
    fi
  fi
fi

# Execute the AWS command
aws sts get-caller-identity $profile